var a = x - 400;
                var b = y - 400;
                var dist = (a * a + b * b);
                Color color;
                if (dist < 150 * 150)
                {

                    var d = 256 - (int)Sqrt(dist);
                    color = FromSRgb(d, d, d);
                    if (b < 10 && b > -10)
                    {
                        color = FromSRgb(d, d, 0);
                    }
                }
                else
                {
                    color = FromRgb(127, 127, 127);
                }
                var ptr = _bitmap.BackBuffer + x * 4 + _bitmap.BackBufferStride * y;
                unsafe
                {

                    *((int*)ptr) = (color.R << 16) | (color.G << 8) | (color.B);
                }
Tick()
class Vector3
{
    public Point3 Begin { get; }
    public Point3 End { get; }

    public Vector3(Point3 begin, Point3 end)
    {
        Begin = begin;
        End = end;
    }
    public Vector Projection(Point3 observer, double displayDistance)
    {
        return new(Begin.Projection(observer, displayDistance), End.Projection(observer, displayDistance));
    }
    public static float Dot(Vector3 a, Vector3 b)
    {
        return System.Numerics.Vector3.Dot(new System.Numerics.Vector3(a.Begin.X - a.End.X, a.Begin.Y - a.End.Y, a.Begin.Z - a.End.Z), new System.Numerics.Vector3(b.Begin.X - b.End.X, b.Begin.Y - b.End.Y, b.Begin.Z - b.End.Z));
    }
    public static Vector3 Cross(Vector3 a, Vector3 b)
    {
        return System.Numerics.Vector3.Cross(new System.Numerics.Vector3(a.Begin.X - a.End.X, a.Begin.Y - a.End.Y, a.Begin.Z - a.End.Z), new System.Numerics.Vector3(b.Begin.X - b.End.X, b.Begin.Y - b.End.Y, b.Begin.Z - b.End.Z));
    }
